/*
 * Wolontariusz API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.73
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WolontariuszApi);
  }
}(this, function(expect, WolontariuszApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WolontariuszApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('getBlobs', function() {
        it('should call getBlobs successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlobs call and complete the assertions
          /*

          instance.getBlobs(blobid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvenetsEventidTopicsTopicid', function() {
        it('should call getEvenetsEventidTopicsTopicid successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvenetsEventidTopicsTopicid call and complete the assertions
          /*

          instance.getEvenetsEventidTopicsTopicid(eventid, topicid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WolontariuszApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvents', function() {
        it('should call getEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvents call and complete the assertions
          /*
          var opts = {};

          instance.getEvents(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(WolontariuszApi.Event);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventsEventid', function() {
        it('should call getEventsEventid successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventsEventid call and complete the assertions
          /*

          instance.getEventsEventid(eventid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WolontariuszApi.EventForOrg);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventsEventidQuestions', function() {
        it('should call getEventsEventidQuestions successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventsEventidQuestions call and complete the assertions
          /*

          instance.getEventsEventidQuestions(eventid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(WolontariuszApi.Topic);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventsEventidTasks', function() {
        it('should call getEventsEventidTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventsEventidTasks call and complete the assertions
          /*

          instance.getEventsEventidTasks(eventid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(WolontariuszApi.Task);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventsEventidTasksTaskid', function() {
        it('should call getEventsEventidTasksTaskid successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventsEventidTasksTaskid call and complete the assertions
          /*

          instance.getEventsEventidTasksTaskid(eventid, taskid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WolontariuszApi.InlineResponse200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventsEventidUsers', function() {
        it('should call getEventsEventidUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventsEventidUsers call and complete the assertions
          /*

          instance.getEventsEventidUsers(eventid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventsEventidUsersUserid', function() {
        it('should call getEventsEventidUsersUserid successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventsEventidUsersUserid call and complete the assertions
          /*

          instance.getEventsEventidUsersUserid(eventid, userid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WolontariuszApi.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganisations', function() {
        it('should call getOrganisations successfully', function(done) {
          // TODO: uncomment getOrganisations call and complete the assertions
          /*

          instance.getOrganisations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(WolontariuszApi.Organisation);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserUserid', function() {
        it('should call getUserUserid successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserUserid call and complete the assertions
          /*

          instance.getUserUserid(userid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WolontariuszApi.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUsers', function() {
        it('should call getUsers successfully', function(done) {
          // TODO: uncomment getUsers call and complete the assertions
          /*

          instance.getUsers(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postBlobs', function() {
        it('should call postBlobs successfully', function(done) {
          // TODO: uncomment, update parameter values for postBlobs call and complete the assertions
          /*
          var opts = {};

          instance.postBlobs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEvents', function() {
        it('should call postEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for postEvents call and complete the assertions
          /*
          var opts = {};

          instance.postEvents(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEventsEventidTasks', function() {
        it('should call postEventsEventidTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for postEventsEventidTasks call and complete the assertions
          /*
          var opts = {};

          instance.postEventsEventidTasks(eventid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEventsEventidTasksTaskidUsers', function() {
        it('should call postEventsEventidTasksTaskidUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for postEventsEventidTasksTaskidUsers call
          /*
          var opts = {};

          instance.postEventsEventidTasksTaskidUsers(eventid, taskid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEventsEventidTopics', function() {
        it('should call postEventsEventidTopics successfully', function(done) {
          // TODO: uncomment, update parameter values for postEventsEventidTopics call and complete the assertions
          /*
          var opts = {};

          instance.postEventsEventidTopics(eventid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEventsEventidTopicsTopicidComments', function() {
        it('should call postEventsEventidTopicsTopicidComments successfully', function(done) {
          // TODO: uncomment, update parameter values for postEventsEventidTopicsTopicidComments call
          /*
          var opts = {};

          instance.postEventsEventidTopicsTopicidComments(eventid, topicid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postEventsEventidUsersUseridTasks', function() {
        it('should call postEventsEventidUsersUseridTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for postEventsEventidUsersUseridTasks call
          /*
          var opts = {};

          instance.postEventsEventidUsersUseridTasks(eventid, userid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postOrganisations', function() {
        it('should call postOrganisations successfully', function(done) {
          // TODO: uncomment postOrganisations call and complete the assertions
          /*

          instance.postOrganisations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putEventsEventid', function() {
        it('should call putEventsEventid successfully', function(done) {
          // TODO: uncomment, update parameter values for putEventsEventid call
          /*
          var opts = {};

          instance.putEventsEventid(eventid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putEventsEventidUsers', function() {
        it('should call putEventsEventidUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for putEventsEventidUsers call
          /*
          var opts = {};

          instance.putEventsEventidUsers(eventid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putOrganisationsOrgid', function() {
        it('should call putOrganisationsOrgid successfully', function(done) {
          // TODO: uncomment, update parameter values for putOrganisationsOrgid call
          /*
          var opts = {};

          instance.putOrganisationsOrgid(orgid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putUsersUserid', function() {
        it('should call putUsersUserid successfully', function(done) {
          // TODO: uncomment, update parameter values for putUsersUserid call
          /*
          var opts = {};

          instance.putUsersUserid(userid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
