/*
 * Wolontariusz API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.73
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Event from '../model/Event';
import EventForOrg from '../model/EventForOrg';
import EventidTopicsBody from '../model/EventidTopicsBody';
import EventidUsersBody from '../model/EventidUsersBody';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import Organisation from '../model/Organisation';
import Task from '../model/Task';
import Topic from '../model/Topic';
import User from '../model/User';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getBlobs operation.
     * @callback moduleapi/DefaultApi~getBlobsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} blobid 
     * @param {module:api/DefaultApi~getBlobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlobs(blobid, callback) {
      
      let postBody = null;
      // verify the required parameter 'blobid' is set
      if (blobid === undefined || blobid === null) {
        throw new Error("Missing the required parameter 'blobid' when calling getBlobs");
      }

      let pathParams = {
        'blobid': blobid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/blobs/{blobid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEvenetsEventidTopicsTopicid operation.
     * @callback moduleapi/DefaultApi~getEvenetsEventidTopicsTopicidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} eventid 
     * @param {String} topicid 
     * @param {module:api/DefaultApi~getEvenetsEventidTopicsTopicidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEvenetsEventidTopicsTopicid(eventid, topicid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEvenetsEventidTopicsTopicid");
      }
      // verify the required parameter 'topicid' is set
      if (topicid === undefined || topicid === null) {
        throw new Error("Missing the required parameter 'topicid' when calling getEvenetsEventidTopicsTopicid");
      }

      let pathParams = {
        'eventid': eventid,'topicid': topicid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/evenets/{eventid}/topics/{topicid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback moduleapi/DefaultApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 
     * @param {String} opts.endDate 
     * @param {String} opts.orgId 
     * @param {module:api/DefaultApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'startDate': opts['startDate'],'endDate': opts['endDate'],'orgId': opts['orgId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventsEventid operation.
     * @callback moduleapi/DefaultApi~getEventsEventidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventForOrg{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * Only event coordinator can access.
     * @param {String} eventid 
     * @param {module:api/DefaultApi~getEventsEventidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventsEventid(eventid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEventsEventid");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventForOrg;

      return this.apiClient.callApi(
        '/events/{eventid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventsEventidQuestions operation.
     * @callback moduleapi/DefaultApi~getEventsEventidQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Topic>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} eventid 
     * @param {module:api/DefaultApi~getEventsEventidQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventsEventidQuestions(eventid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEventsEventidQuestions");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Topic];

      return this.apiClient.callApi(
        '/events/{eventid}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventsEventidTasks operation.
     * @callback moduleapi/DefaultApi~getEventsEventidTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} eventid 
     * @param {module:api/DefaultApi~getEventsEventidTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventsEventidTasks(eventid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEventsEventidTasks");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Task];

      return this.apiClient.callApi(
        '/events/{eventid}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventsEventidTasksTaskid operation.
     * @callback moduleapi/DefaultApi~getEventsEventidTasksTaskidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} eventid 
     * @param {String} taskid 
     * @param {module:api/DefaultApi~getEventsEventidTasksTaskidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventsEventidTasksTaskid(eventid, taskid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEventsEventidTasksTaskid");
      }
      // verify the required parameter 'taskid' is set
      if (taskid === undefined || taskid === null) {
        throw new Error("Missing the required parameter 'taskid' when calling getEventsEventidTasksTaskid");
      }

      let pathParams = {
        'eventid': eventid,'taskid': taskid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/events/{eventid}/tasks/{taskid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventsEventidUsers operation.
     * @callback moduleapi/DefaultApi~getEventsEventidUsersCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} eventid 
     * @param {module:api/DefaultApi~getEventsEventidUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventsEventidUsers(eventid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEventsEventidUsers");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/events/{eventid}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventsEventidUsersUserid operation.
     * @callback moduleapi/DefaultApi~getEventsEventidUsersUseridCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} eventid 
     * @param {String} userid 
     * @param {module:api/DefaultApi~getEventsEventidUsersUseridCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventsEventidUsersUserid(eventid, userid, callback) {
      
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling getEventsEventidUsersUserid");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getEventsEventidUsersUserid");
      }

      let pathParams = {
        'eventid': eventid,'userid': userid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/events/{eventid}/users/{userid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrganisations operation.
     * @callback moduleapi/DefaultApi~getOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organisation>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {module:api/DefaultApi~getOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrganisations(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organisation];

      return this.apiClient.callApi(
        '/organisations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserUserid operation.
     * @callback moduleapi/DefaultApi~getUserUseridCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * @param {String} userid 
     * @param {module:api/DefaultApi~getUserUseridCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserUserid(userid, callback) {
      
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getUserUserid");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/{userid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback moduleapi/DefaultApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * Only for Krakows employe
     * @param {module:api/DefaultApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUsers(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postBlobs operation.
     * @callback moduleapi/DefaultApi~postBlobsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/DefaultApi~postBlobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postBlobs(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/blobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postEvents operation.
     * @callback moduleapi/DefaultApi~postEventsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {Object} opts Optional parameters
     * @param {module:model/Event} opts.body 
     * @param {module:api/DefaultApi~postEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postEvents(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postEventsEventidTasks operation.
     * @callback moduleapi/DefaultApi~postEventsEventidTasksCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {String} eventid 
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.body 
     * @param {module:api/DefaultApi~postEventsEventidTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postEventsEventidTasks(eventid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling postEventsEventidTasks");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/events/{eventid}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postEventsEventidTasksTaskidUsers operation.
     * @callback moduleapi/DefaultApi~postEventsEventidTasksTaskidUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {String} eventid 
     * @param {String} taskid 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/DefaultApi~postEventsEventidTasksTaskidUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEventsEventidTasksTaskidUsers(eventid, taskid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling postEventsEventidTasksTaskidUsers");
      }
      // verify the required parameter 'taskid' is set
      if (taskid === undefined || taskid === null) {
        throw new Error("Missing the required parameter 'taskid' when calling postEventsEventidTasksTaskidUsers");
      }

      let pathParams = {
        'eventid': eventid,'taskid': taskid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/events/{eventid}/tasks/{taskid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postEventsEventidTopics operation.
     * @callback moduleapi/DefaultApi~postEventsEventidTopicsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {String} eventid 
     * @param {Object} opts Optional parameters
     * @param {module:model/EventidTopicsBody} opts.body 
     * @param {module:api/DefaultApi~postEventsEventidTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postEventsEventidTopics(eventid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling postEventsEventidTopics");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/events/{eventid}/topics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postEventsEventidTopicsTopicidComments operation.
     * @callback moduleapi/DefaultApi~postEventsEventidTopicsTopicidCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {String} eventid 
     * @param {String} topicid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~postEventsEventidTopicsTopicidCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEventsEventidTopicsTopicidComments(eventid, topicid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling postEventsEventidTopicsTopicidComments");
      }
      // verify the required parameter 'topicid' is set
      if (topicid === undefined || topicid === null) {
        throw new Error("Missing the required parameter 'topicid' when calling postEventsEventidTopicsTopicidComments");
      }

      let pathParams = {
        'eventid': eventid,'topicid': topicid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/events/{eventid}/topics/{topicid}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postEventsEventidUsersUseridTasks operation.
     * @callback moduleapi/DefaultApi~postEventsEventidUsersUseridTasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * This to remove.
     * @param {String} eventid 
     * @param {String} userid 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body If null then future task else finished task.
     * @param {module:api/DefaultApi~postEventsEventidUsersUseridTasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEventsEventidUsersUseridTasks(eventid, userid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling postEventsEventidUsersUseridTasks");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling postEventsEventidUsersUseridTasks");
      }

      let pathParams = {
        'eventid': eventid,'userid': userid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/events/{eventid}/users/{userid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postOrganisations operation.
     * @callback moduleapi/DefaultApi~postOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your POST endpoint
     * @param {module:api/DefaultApi~postOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postOrganisations(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/organisations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putEventsEventid operation.
     * @callback moduleapi/DefaultApi~putEventsEventidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your PUT endpoint
     * @param {String} eventid 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/DefaultApi~putEventsEventidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEventsEventid(eventid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling putEventsEventid");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/events/{eventid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putEventsEventidUsers operation.
     * @callback moduleapi/DefaultApi~putEventsEventidUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your PUT endpoint
     * @param {String} eventid 
     * @param {Object} opts Optional parameters
     * @param {module:model/EventidUsersBody} opts.body 
     * @param {module:api/DefaultApi~putEventsEventidUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEventsEventidUsers(eventid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling putEventsEventidUsers");
      }

      let pathParams = {
        'eventid': eventid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/events/{eventid}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putOrganisationsOrgid operation.
     * @callback moduleapi/DefaultApi~putOrganisationsOrgidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your PUT endpoint
     * @param {String} orgid 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/DefaultApi~putOrganisationsOrgidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsOrgid(orgid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'orgid' is set
      if (orgid === undefined || orgid === null) {
        throw new Error("Missing the required parameter 'orgid' when calling putOrganisationsOrgid");
      }

      let pathParams = {
        'orgid': orgid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/organisations/{orgid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putUsersUserid operation.
     * @callback moduleapi/DefaultApi~putUsersUseridCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your PUT endpoint
     * @param {String} userid 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/DefaultApi~putUsersUseridCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putUsersUserid(userid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling putUsersUserid");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}